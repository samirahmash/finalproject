)
library(shiny)
source('./datafunctions.R')
shinyUI(fluidPage(
titlePanel("International Labor Organization - Visualized"),
sidebarLayout(
sidebarPanel(
radioButtons("radio1","Gender",
choices = list("Female" = 'Female',
"Male" = 'Male',
"Total" = 'Total'),
selected = 'Total'),
radioButtons("radio2", "Area",
choices = list("Rural",
"Urban",
"Total"),
selected = "Total"),
sliderInput("slider2", "Slider Range",
min = min(short.data$Time),
max = max(short.data$Time),
value = c(1995,2000)
),
selectInput("select", label = h3("Select an Age Range"),
choices = only.ages,
select = NULL)
),
mainPanel(
plotlyOutput("WorldMap")
)
)
)
)
library(shiny)
source('./datafunctions.R')
shinyUI(fluidPage(
titlePanel("International Labor Organization - Visualized"),
sidebarLayout(
sidebarPanel(
radioButtons("radio1","Gender",
choices = list("Female" = 'Female',
"Male" = 'Male',
"Total" = 'Total'),
selected = 'Total'),
radioButtons("radio2", "Area",
choices = list("Rural",
"Urban",
"Total"),
selected = "Total"),
sliderInput("slider2", "Slider Range",
min = min(short.data$Time),
max = max(short.data$Time),
value = c(1995,2000)
),
selectInput("select", label = h3("Select an Age Range"),
choices = only.ages,
select = NULL)
),
mainPanel(
plotlyOutput("WorldMap")
)
)
)
)
library(shiny)
source('./datafunctions.R')
shinyUI(fluidPage(
titlePanel("International Labor Organization - Visualized"),
sidebarLayout(
sidebarPanel(
radioButtons("radio1","Gender",
choices = list("Female" = 'Female',
"Male" = 'Male',
"Total" = 'Total'),
selected = 'Total'),
radioButtons("radio2", "Area",
choices = list("Rural",
"Urban",
"Total"),
selected = "Total"),
sliderInput("slider2", "Slider Range",
min = min(short.data$Time),
max = max(short.data$Time),
value = c(1995,2000)
),
selectInput("select", label = h3("Select an Age Range"),
choices = only.ages)
),
mainPanel(
plotlyOutput("WorldMap")
)
)
)
)
runApp()
library(shiny)
source('./datafunctions.R')
shinyUI(fluidPage(
titlePanel("International Labor Organization - Visualized"),
sidebarLayout(
sidebarPanel(
radioButtons("radio1","Gender",
choices = list("Female" = 'Female',
"Male" = 'Male',
"Total" = 'Total'),
selected = 'Total'),
radioButtons("radio2", "Area",
choices = list("Rural",
"Urban",
"Total"),
selected = "Total"),
sliderInput("slider2", "Slider Range",
min = min(short.data$Time),
max = max(short.data$Time),
value = c(1995,2000)
),
selectInput("select", label = h3("Select an Age Range"),
choices = only.ages)
),
mainPanel(
plotlyOutput("WorldMap")
)
)
)
)
runApp()
View(only.ages)
library(shiny)
source('./datafunctions.R')
shinyUI(fluidPage(
titlePanel("International Labor Organization - Visualized"),
sidebarLayout(
sidebarPanel(
radioButtons("radio1","Gender",
choices = list("Female" = 'Female',
"Male" = 'Male',
"Total" = 'Total'),
selected = 'Total'),
radioButtons("radio2", "Area",
choices = list("Rural",
"Urban",
"Total"),
selected = "Total"),
sliderInput("slider2", "Slider Range",
min = min(short.data$Time),
max = max(short.data$Time),
value = c(1995,2000)
),
selectInput("select", label = h3("Select an Age Range"),
choices = only.ages, value = only.ages[1])
),
mainPanel(
plotlyOutput("WorldMap")
)
)
)
)
library(shiny)
source('./datafunctions.R')
shinyUI(fluidPage(
titlePanel("International Labor Organization - Visualized"),
sidebarLayout(
sidebarPanel(
radioButtons("radio1","Gender",
choices = list("Female" = 'Female',
"Male" = 'Male',
"Total" = 'Total'),
selected = 'Total'),
radioButtons("radio2", "Area",
choices = list("Rural",
"Urban",
"Total"),
selected = "Total"),
sliderInput("slider2", "Slider Range",
min = min(short.data$Time),
max = max(short.data$Time),
value = c(1995,2000)
),
selectInput("select", label = h3("Select an Age Range"),
choices = only.ages, selected = only.ages[1])
),
mainPanel(
plotlyOutput("WorldMap")
)
)
)
)
runApp()
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("./data/ilodata.csv")
# load packages
library(dplyr)
# filter down our data, excluding rows where there is no observed value
data <- filter(data, !is.na(Obs_Value))
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
only.countries <- select(data, Country_Label) %>% unique()
only.ages <- select(data, Classif1_Item_Label) %>% unique()
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, start.year, end.year, age) {
mapping.data <- short.data %>% subset(Classif2_Item_Label %in% urbvar) %>%
subset(Sex_Item_Label %in% gender) %>%
group_by(Country_Code) %>%
filter(age == Clasif1_Item_Label) %>%
filter(Time > start.year - 1) %>%
filter(Time < end.year + 1) %>%
summarise(occurrences = n(),
mean.observations = mean(Obs_Value))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
return (mapping.data)
}
#mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
runApp()
# creates heat map of unemployment data around the world
# load libraries for use of functions
library(plotly)
library(dplyr)
# source data from data folder
# source script from Nathan's to retrieve refined data table
# create a more concise data table to use info for map
# shows interactive map
WorldMap <- function(df) {
df$hover <- with(df, paste("Country:", df$Country_Code, '<br>',
"Percentage Unemployed:", df$mean.observations, '<br>',
"Total Years and Genders:", df$occurrences, '<br',
"Age Range:", df$Classif1_Item_Label))
newly.created.map <- df %>%
plot_ly(type = 'choropleth',
locations = ~Country_Code,
locationmode = "world",
colors = "Purples",
z = ~mean.observations,
text = ~hover
) %>%
#colorbar(title = "Percentage of Workforce Unemployed")
layout(
title = "Unemployment Rates Around the World",
geo = list(scope = "world")
)
return(newly.created.map)
}
runApp()
# creates heat map of unemployment data around the world
# load libraries for use of functions
library(plotly)
library(dplyr)
# source data from data folder
# source script from Nathan's to retrieve refined data table
# create a more concise data table to use info for map
# shows interactive map
WorldMap <- function(df) {
df$hover <- with(df, paste("Country:", df$Country_Code, '<br>',
"Percentage Unemployed:", df$mean.observations, '<br>',
"Total Years and Genders:", df$occurrences, '<br',
"Age Range:", df$Classif1_Item_Label))
newly.created.map <- df %>%
plot_ly(type = 'choropleth',
locations = ~Country_Code,
locationmode = "world",
colors = "Purples",
z = ~mean.observations,
text = ~hover
) %>%
#colorbar(title = "Percentage of Workforce Unemployed")
layout(
title = "Unemployment Rates Around the World",
geo = list(scope = "world")
)
return(newly.created.map)
}
runApp()
runApp()
View(hello)
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("./data/ilodata.csv")
# load packages
library(dplyr)
# filter down our data, excluding rows where there is no observed value
data <- filter(data, !is.na(Obs_Value))
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
only.countries <- select(data, Country_Label) %>% unique()
only.ages <- select(data, Classif1_Item_Label) %>% unique()
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, start.year, end.year, age) {
mapping.data <- short.data %>% subset(Classif2_Item_Label %in% urbvar) %>%
subset(Sex_Item_Label %in% gender) %>%
group_by(Country_Code) %>%
filter(age == Clasif1_Item_Label) %>%
filter(Time > start.year - 1) %>%
filter(Time < end.year + 1) %>%
summarise(occurrences = n(),
mean.observations = mean(Obs_Value))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
mapping.data$hover <- with(mapping.data, paste("Country:", Country_Code, '<br>',
"Percentage Unemployed:", mean.observations, '<br>',
"Total Years and Genders:", occurrences, '<br',
"Age Range:", Classif1_Item_Label))
return (mapping.data)
}
#mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
runApp()
# creates heat map of unemployment data around the world
# load libraries for use of functions
library(plotly)
library(dplyr)
# source data from data folder
# source script from Nathan's to retrieve refined data table
# create a more concise data table to use info for map
# shows interactive map
WorldMap <- function(df) {
return(plot_ly(df, type = 'choropleth',
locations = ~Country_Code,
locationmode = "world",
colors = "Purples",
z = ~mean.observations,
text = ~hover
) %>%
colorbar(title = "Percentage of Workforce Unemployed") %>%
layout(
title = "Unemployment Rates Around the World",
geo = list(scope = "world")
)
)
}
runApp()
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("./data/ilodata.csv")
# load packages
library(dplyr)
# filter down our data, excluding rows where there is no observed value
data <- filter(data, !is.na(Obs_Value))
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
only.countries <- select(data, Country_Label) %>% unique()
only.ages <- select(data, Classif1_Item_Label) %>% unique()
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, start.year, end.year, age) {
mapping.data <- short.data %>% subset(Classif2_Item_Label %in% urbvar) %>%
subset(Sex_Item_Label %in% gender) %>%
group_by(Country_Code) %>%
filter(age == Clasif1_Item_Label) %>%
filter(Time > start.year - 1) %>%
filter(Time < end.year + 1) %>%
summarise(occurrences = n(),
mean.observations = mean(Obs_Value))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
mapping.data <- mutate(mapping.data, hover = with(mapping.data,
paste("Country:", Country_Code, '<br>',
"Percentage Unemployed:", mean.observations, '<br>',
"Total Years and Genders:", occurrences, '<br',
"Age Range:", Classif1_Item_Label)
)
)
return (mapping.data)
}
#mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
hello <- FilterMapData("Urban", "Male", 2000, 2001, "Total")
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("./data/ilodata.csv")
# load packages
library(dplyr)
# filter down our data, excluding rows where there is no observed value
data <- filter(data, !is.na(Obs_Value))
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
only.countries <- select(data, Country_Label) %>% unique()
only.ages <- select(data, Classif1_Item_Label) %>% unique()
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, start.year, end.year, age) {
mapping.data <- short.data %>% subset(Classif2_Item_Label %in% urbvar) %>%
subset(Sex_Item_Label %in% gender) %>%
group_by(Country_Code) %>%
filter(age == Claasif1_Item_Label) %>%
filter(Time > start.year - 1) %>%
filter(Time < end.year + 1) %>%
summarise(occurrences = n(),
mean.observations = mean(Obs_Value))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
mapping.data <- mutate(mapping.data, hover = with(mapping.data,
paste("Country:", Country_Code, '<br>',
"Percentage Unemployed:", mean.observations, '<br>',
"Total Years and Genders:", occurrences, '<br',
"Age Range:", Classif1_Item_Label)
)
)
return (mapping.data)
}
#mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
hello <- FilterMapData("Urban", "Male", 2000, 2001, "Total")
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("./data/ilodata.csv")
# load packages
library(dplyr)
# filter down our data, excluding rows where there is no observed value
data <- filter(data, !is.na(Obs_Value))
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
only.countries <- select(data, Country_Label) %>% unique()
only.ages <- select(data, Classif1_Item_Label) %>% unique()
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, start.year, end.year, age) {
mapping.data <- short.data %>% subset(Classif2_Item_Label %in% urbvar) %>%
subset(Sex_Item_Label %in% gender) %>%
group_by(Country_Code) %>%
filter(age == Classif1_Item_Label) %>%
filter(Time > start.year - 1) %>%
filter(Time < end.year + 1) %>%
summarise(occurrences = n(),
mean.observations = mean(Obs_Value))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
mapping.data <- mutate(mapping.data, hover = with(mapping.data,
paste("Country:", Country_Code, '<br>',
"Percentage Unemployed:", mean.observations, '<br>',
"Total Years and Genders:", occurrences, '<br',
"Age Range:", Classif1_Item_Label)
)
)
return (mapping.data)
}
#mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
hello <- FilterMapData("Urban", "Male", 2000, 2001, "Total")
View(short.data)
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("./data/ilodata.csv")
# load packages
library(dplyr)
# filter down our data, excluding rows where there is no observed value
data <- filter(data, !is.na(Obs_Value))
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
only.countries <- select(data, Country_Label) %>% unique()
only.ages <- select(data, Classif1_Item_Label) %>% unique()
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, start.year, end.year, age) {
mapping.data <- short.data %>% subset(Classif2_Item_Label %in% urbvar) %>%
subset(Sex_Item_Label %in% gender) %>%
group_by(Country_Code) %>%
filter(age == short.data$Classif1_Item_Label) %>%
filter(Time > start.year - 1) %>%
filter(Time < end.year + 1) %>%
summarise(occurrences = n(),
mean.observations = mean(Obs_Value))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
mapping.data <- mutate(mapping.data, hover = with(mapping.data,
paste("Country:", Country_Code, '<br>',
"Percentage Unemployed:", mean.observations, '<br>',
"Total Years and Genders:", occurrences, '<br',
"Age Range:", Classif1_Item_Label)
)
)
return (mapping.data)
}
#mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
View(short.data)
hello <- FilterMapData("Urban", "Male", 2000, 2001, "Total")
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("./data/ilodata.csv")
# load packages
library(dplyr)
# filter down our data, excluding rows where there is no observed value
data <- filter(data, !is.na(Obs_Value))
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
only.countries <- select(data, Country_Label) %>% unique()
only.ages <- select(data, Classif1_Item_Label) %>% unique()
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, start.year, end.year, age) {
mapping.data <- short.data %>% subset(Classif2_Item_Label %in% urbvar) %>%
subset(Sex_Item_Label %in% gender) %>%
group_by(Country_Code) %>%
filter(age == short.data$Classif1_Item_Label) %>%
filter(Time > start.year - 1) %>%
filter(Time < end.year + 1) %>%
mapping.data <- mapping.data[!duplicated(mapping.data), ]
mapping.data <- mutate(mapping.data, hover = with(mapping.data,
paste("Country:", Country_Code, '<br>',
"Percentage Unemployed:", Obs_Value, '<br>',
"Age Range:", Classif1_Item_Label)
)
)
return (mapping.data)
}
#mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
hello <- FilterMapData("Urban", "Male", 2000, 2001, "Total")
