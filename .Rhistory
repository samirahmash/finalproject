locationmode = "world",
colors = "Reds",
z = ~Obs_Value) %>%
colorbar(title = "Percentage of Workforce Unemployed") %>%
layout(
title = "Unemployment Rates Around the World",
geo = list(scope = "world")
)
return(newly.created.map)
}
WorldMap()
# creates heat map of unemployment data around the world
# load libraries for use of functions
library(plotly)
library(dplyr)
# source data from data folder
ilo.data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# source script from Nathan's to retrieve refined data table
source('~/Documents/GitHub/finalproject/datafunctions.R')
# create a more concise data table to use info for map
mapping.data$hover <- with(mapping.data, paste("Country:", Country_Label, '<br>',
"Year:", Time, '<br>',
"Percentage Unemployed:", Obs_Value))
# shows interactive map
WorldMap <- function() {
#single.country.row <- filter(mapping.data, Country_Label == country.name)
newly.created.map <- mapping.data %>%
plot_ly(type = 'choropleth',
locations = ~Country_Code,
locationmode = "world",
colorpalette = "Reds",
z = ~Obs_Value) %>%
colorbar(title = "Percentage of Workforce Unemployed") %>%
layout(
title = "Unemployment Rates Around the World",
geo = list(scope = "world")
)
return(newly.created.map)
}
WorldMap()
# creates heat map of unemployment data around the world
# load libraries for use of functions
library(plotly)
library(dplyr)
# source data from data folder
ilo.data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# source script from Nathan's to retrieve refined data table
source('~/Documents/GitHub/finalproject/datafunctions.R')
# create a more concise data table to use info for map
mapping.data$hover <- with(mapping.data, paste("Country:", Country_Label, '<br>',
"Year:", Time, '<br>',
"Percentage Unemployed:", Obs_Value))
# shows interactive map
WorldMap <- function() {
#single.country.row <- filter(mapping.data, Country_Label == country.name)
newly.created.map <- mapping.data %>%
plot_ly(type = 'choropleth',
locations = ~Country_Code,
locationmode = "world",
colorpalette = "Picnic",
z = ~Obs_Value) %>%
colorbar(title = "Percentage of Workforce Unemployed") %>%
layout(
title = "Unemployment Rates Around the World",
geo = list(scope = "world")
)
return(newly.created.map)
}
WorldMap()
# creates heat map of unemployment data around the world
# load libraries for use of functions
library(plotly)
library(dplyr)
# source data from data folder
ilo.data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# source script from Nathan's to retrieve refined data table
source('~/Documents/GitHub/finalproject/datafunctions.R')
# create a more concise data table to use info for map
mapping.data$hover <- with(mapping.data, paste("Country:", Country_Label, '<br>',
"Year:", Time, '<br>',
"Percentage Unemployed:", Obs_Value))
# shows interactive map
WorldMap <- function() {
#single.country.row <- filter(mapping.data, Country_Label == country.name)
newly.created.map <- mapping.data %>%
plot_ly(type = 'choropleth',
locations = ~Country_Code,
locationmode = "world",
colors = "Reds",
z = ~Obs_Value) %>%
colorbar(title = "Percentage of Workforce Unemployed") %>%
layout(
title = "Unemployment Rates Around the World",
geo = list(scope = "world")
)
return(newly.created.map)
}
WorldMap()
# creates heat map of unemployment data around the world
# load libraries for use of functions
library(plotly)
library(dplyr)
# source data from data folder
ilo.data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# source script from Nathan's to retrieve refined data table
source('~/Documents/GitHub/finalproject/datafunctions.R')
# create a more concise data table to use info for map
mapping.data$hover <- with(mapping.data, paste("Country:", Country_Label, '<br>',
"Year:", Time, '<br>',
"Percentage Unemployed:", Obs_Value))
# shows interactive map
WorldMap <- function() {
#single.country.row <- filter(mapping.data, Country_Label == country.name)
newly.created.map <- mapping.data %>%
plot_ly(type = 'choropleth',
locations = ~Country_Code,
locationmode = "world",
colorscale = "Purples",
z = ~Obs_Value) %>%
colorbar(title = "Percentage of Workforce Unemployed") %>%
layout(
title = "Unemployment Rates Around the World",
geo = list(scope = "world")
)
return(newly.created.map)
}
WorldMap()
# creates heat map of unemployment data around the world
# load libraries for use of functions
library(plotly)
library(dplyr)
# source data from data folder
ilo.data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# source script from Nathan's to retrieve refined data table
source('~/Documents/GitHub/finalproject/datafunctions.R')
# create a more concise data table to use info for map
mapping.data$hover <- with(mapping.data, paste("Country:", Country_Label, '<br>',
"Year:", Time, '<br>',
"Percentage Unemployed:", Obs_Value))
# shows interactive map
WorldMap <- function() {
#single.country.row <- filter(mapping.data, Country_Label == country.name)
newly.created.map <- mapping.data %>%
plot_ly(type = 'choropleth',
locations = ~Country_Code,
locationmode = "world",
colorscale = "Purples",
z = ~Obs_Value) %>%
colorbar(title = "Percentage of Workforce Unemployed") %>%
layout(
title = "Unemployment Rates Around the World",
geo = list(scope = "world")
)
return(newly.created.map)
}
WorldMap()
# creates heat map of unemployment data around the world
# load libraries for use of functions
library(plotly)
library(dplyr)
# source data from data folder
ilo.data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# source script from Nathan's to retrieve refined data table
source('~/Documents/GitHub/finalproject/datafunctions.R')
# create a more concise data table to use info for map
mapping.data$hover <- with(mapping.data, paste("Country:", Country_Label, '<br>',
"Year:", Time, '<br>',
"Percentage Unemployed:", Obs_Value))
# shows interactive map
WorldMap <- function() {
#single.country.row <- filter(mapping.data, Country_Label == country.name)
newly.created.map <- mapping.data %>%
plot_ly(type = 'choropleth',
locations = ~Country_Code,
locationmode = "world",
colors = "Purples",
z = ~Obs_Value) %>%
colorbar(title = "Percentage of Workforce Unemployed") %>%
layout(
title = "Unemployment Rates Around the World",
geo = list(scope = "world")
)
return(newly.created.map)
}
WorldMap()
View(short.data)
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(short.data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
return (mapping.data)
}
mapping.data <- FilterMapData("National", "Total", "Total")
View(mapping.data)
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(short.data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
return (mapping.data)
}
mapping.data <- FilterMapData("National", "Total", "Total")
View(mapping.data)
colnames(mapping.data)
colnames(data)
data <- filter(data, Obs_Value != NULL) %>%
filter(Flag_Code != c("B", "U")
data <- filter(data, Obs_Value != NULL) %>%
filter(Flag_Code != c("B", "U")
data <- filter(data, Obs_Value != NULL) %>%
filter(Flag_Code != c("B", "U"))
data <- filter(data, !is.na(Obs_Value)) %>%
filter(Flag_Code == !c("B", "U"))
data <- filter(data, !is.na(Obs_Value)) %>%
filter(Flag_Code == c("B", "U"))
data <- filter(data, !is.na(Obs_Value))
View(data)
data <- filter(data, !is.na(Obs_Value)) %>%
filter(Flag_Code = "U")
data <- filter(data, !is.na(Obs_Value)) %>%
filter(Flag_Code == "U")
View(data)
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# load packages
library(dplyr)
is.NA(variable/value)
data <- filter(data, !is.na(Obs_Value)) %>%
filter(Flag_Code == "U")
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
return (mapping.data)
}
mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
View(mapping.data)
View(data)
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# load packages
library(dplyr)
is.NA(variable/value)
data <- filter(data, !is.na(Obs_Value)) %>%
filter(Flag_Code == "U")
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(short.data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
return (mapping.data)
}
mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
View(mapping.data)
View(mapping.data)
View(data)
mapping.data <- FilterMapData("National", "Total", "Total")
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
View(short.data)
data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
View(data)
data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# load packages
data <- read.csv("/Users/nathanbombardier/Documents/School/Fall2016/INFO201/finalproject/data/ilodata.csv")
data <- read.csv("/Users/nathanbombardier/Documents/School/Fall2016/INFO201/finalproject/data/ilodata.csv")
View(data)
data <- filter(data, !is.na(Obs_Value)) %>%
filter(Flag_Code == "U")
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(short.data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
return (mapping.data)
}
View(data)
View(short.data)
FilterMapData("National", "Total", "Total")
View(data)
View(short.data)
View(data)
View(short.data)
data <- read.csv("/Users/nathanbombardier/Documents/School/Fall2016/INFO201/finalproject/data/ilodata.csv")
data <- read.csv("/Users/nathanbombardier/Documents/School/Fall2016/INFO201/finalproject/data/ilodata.csv")
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
return (mapping.data)
}
mapping.data <- FilterMapData("National", "Total", "Total")
View(mapping.data)
data <- filter(data, !is.na(Obs_Value)) %>%
filter(Flag_Code == "U")
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
data <- read.csv("/Users/nathanbombardier/Documents/School/Fall2016/INFO201/finalproject/data/ilodata.csv")
View(data)
View(short.data)
data <- filter(data, !is.na(Obs_Value))
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
return (mapping.data)
}
mapping.data <- FilterMapData("National", "Total", "Total")
View(mapping.data)
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(short.data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
return (mapping.data)
}
mapping.data <- FilterMapData("National", "Total", "Total")
View(mapping.data)
only.countries <- select(data, Country_Label) %>%
unique()
View(only.countries)
View(only.countries)
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# load packages
library(dplyr)
# filter down our data, excluding rows where there is no observed value
data <- filter(data, !is.na(Obs_Value))
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
only.countries <- select(data, Country_Label) %>%
unique()
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(short.data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
return (mapping.data)
}
#mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# load packages
library(dplyr)
# filter down our data, excluding rows where there is no observed value
data <- filter(data, !is.na(Obs_Value))
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
only.countries <- select(data, Country_Label) %>%
unique()
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(short.data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
return (mapping.data)
}
#mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
shiny::runApp('Documents/School/Fall2016/INFO201/m14-shiny/demo-3')
shiny::runApp('Documents/School/Fall2016/INFO201/a8-building-apps-eyeneye')
data <- read.csv("./data/ilodata.csv")
data <- read.csv("./data/ilodata.csv")
# load packages
library(dplyr)
# filter down our data, excluding rows where there is no observed value
data <- filter(data, !is.na(Obs_Value))
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
only.countries <- select(data, Country_Label) %>%
unique()
library(dplyr)
data <- filter(data, !is.na(Obs_Value))
data <- read.csv("./data/ilodata.csv")
data <- read.csv("./data/ilodata.csv")
data <- read.csv("./data/ilodata.csv")
getwd()
setwd("~/Documents/School/Fall2016/INFO201/finalproject")
data <- read.csv("./data/ilodata.csv")
source('~/Documents/School/Fall2016/INFO201/finalproject/datafunctions.R', echo=TRUE)
View(short.data)
View(short.data)
shiny::runApp()
runApp()
weights <- c(4.7, 4.9, 5, 4.8, 4.7, 4.6, 4.4, 4.3, 4.4, 4.1, 4.2, 4.8, 4.7, 4.6, 4.4, 4.7, 4.8, 4.9, 5.2, 5.4, 5.1, 5.6)
month <- c(rep("Feb", 5), rep("May", 6), rep("Aug", 6), rep("Nov", 5))
deer <- data.frame(weights, month)   #creating a data frame
plot(weights~month, data = deer)  #box plot for weights vs. month
summary(deer.result)
deer.result <- aov(weights~month, data = deer) # weights by month plot
summary(deer.result)
xbar.feb <- mean(weights[month == "Feb"])
xbar.may <- mean(weights[month == "May"])
xbar.aug <- mean(weights[month == "Aug"])
xbar.nov <- mean(weights[month == "Nov"])
meanrank <- sort(xbar.month)  #sorting the rank and means
xbar.month <- tapply(X = deer$weights, INDEX = deer$month, FUN = mean)
meanrank <- sort(xbar.month)  #sorting the rank and means
meanrank
qtukey(0.95, 4, 18)
df <- 39
n <- 10
b <- 2
df.protein <- 1
df.diet <- 1
df inter <- 1
df inter <- 1 # a - 1 - (b - 1)
df.inter <- 1 # a - 1 - (b - 1)
high <- c(73, 102, 118, 104, 81, 107, 100, 87, 117, 111, 98, 74, 56, 111, 95, 88, 82, 77, 86, 92)
low <- c(90, 76, 90, 64, 86, 51, 72, 90, 95, 78, 107, 95, 97, 80, 98, 74, 74, 67, 89, 58)
protein <- matrix(c(high, low), ncol = 4, byrow = F)
grandmean <- sum(protein)/40
xbar.hb <- sum(protein[,1])/10 # mean for high protein beef
xbar.hb <- sum(protein[,2])/10 # mean for high protein beef
protein
xbar.hc <- sum(protein[,2])/10 # mean for high protein beef
xbar.lb <- sum(protein[,3])/10 # mean for high protein beef
xbar.lc <- sum(protein[,4])/10 # mean for high protein beef
xbar.hb <- sum(protein[,1])/10 # mean for high protein beef
xbar.ij <- c(xbar.hb, xbar.hc, xbar.lb, xbar.lc)
xbar.ij
combineSS <- n*sum((xbar.ij - grandmean)^2)
beef <- c(73,102,118,104,81,107,100,87,117,111,90,76,90,64,86,51,72,90,95,78)
cereal <-c(98,74,56,111,95,88,82,77,86,92,107,95,97,80,98,74,74,67,89,58)
nutrition<-c(beef,cereal)
protein<-gl(2,10,length = 40,labels = c("high protein","low protein"))
diet<-gl(2,20,length= 40,labels = c("beef","cereal"))
diet
protein
nutrition.frame <- data.frame(protein, diet, nutrition)
nutrition
nutrition.frame
interaction.plot(diet, protein, nutrition)
female <- c(16.3, 20.4, 12.4, 15.8, 9.5, 38.1, 26.2, 32.3, 35.8, 30.2)
male <- c(15.3, 17.4, 10.9, 10.3, 6.7, 34, 22.8, 27.8, 25, 29.3)
conc <- c(female, male)
hormone <- gl(2, 5, 20, labels = c("no treatment", "treatment"))
hormone
plant <- plantation
install.packages('lme4')
unlogged <- c(18, 19, 30, 5, 11 , 38, 27, 57, 30, 15, 7, 18)
logged <- c(34, 29, 58, 11, 17, 66, 40, 90, 48, 29, 13, 29)
unlogged <- c(18, 19, 30, 5, 11 , 38, 27, 57, 30, 15, 7, 18)
logged <- c(34, 29, 58, 11, 17, 66, 40, 90, 48, 29, 13, 29)
diff <- unlogged - logged
mean(diff)
diff/12
(sum(diff))/12
mean <- mean(diff)
sum((diff - mean)^2)/(n-1)
sum((diff - mean)^2)/(11)
sqrt(sum((diff - mean)^2)/(11))
15.75 / 9.3
?qt
qt(.99, 11, lower.tail = FALSE)
qt(.01, 11, lower.tail = FALSE)
mean/9.313968
sd <- sqrt(sum((diff - mean)^2)/(11))/12)
sd <- sqrt((sum((diff - mean)^2)/(11))/12)
15.75 / sd
