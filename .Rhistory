<<<<<<< HEAD
<<<<<<< HEAD
data.repo <- fromJSON(query.data.repos)
##install.packages("devtools")
##devtools::install_github("rstudio/rmarkdown")
library(jsonlite)
library(dplyr)
##setwd('~/Documents/info-201/a5-github-report-mackmor13/')
user <- 'mbostock'
#function to get user data
GetUserInfo <- function(user) {
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url, per.page, tokenCode)
data.repo <- fromJSON(query.data.repos)
}
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url, per.page, tokenCode)
data.repo <- fromJSON(query.data.repos)
##install.packages("devtools")
##devtools::install_github("rstudio/rmarkdown")
library(jsonlite)
library(dplyr)
##setwd('~/Documents/info-201/a5-github-report-mackmor13/')
user <- 'mbostock'
#function to get user data
GetUserInfo <- function(user) {
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url, per.page, tokenCode)
data.repo <- fromJSON(query.data.repos)
}
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url, pe
##install.packages("devtools")
##devtools::install_github("rstudio/rmarkdown")
library(jsonlite)
library(dplyr)
##setwd('~/Documents/info-201/a5-github-report-mackmor13/')
user <- 'mbostock'
#function to get user data
GetUserInfo <- function(user) {
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url, per.page)
data.repo <- fromJSON(query.data.repos)
}
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url)
data.repo <- fromJSON(query.data.repos)
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url)
data.repo <- fromJSON(query.data.repos, tokenCode)
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url)
data.repo <- fromJSON(query.data.repos)
clearPushBack()
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url)
data.repo <- fromJSON(query.data.repos)
##install.packages("devtools")
##devtools::install_github("rstudio/rmarkdown")
library(jsonlite)
library(dplyr)
##setwd('~/Documents/info-201/a5-github-report-mackmor13/')
user <- 'mbostock'
#function to get user data
GetUserInfo <- function(user) {
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url)
data.repo <- fromJSON(query.data.repos)
}
##install.packages("devtools")
##devtools::install_github("rstudio/rmarkdown")
library(jsonlite)
library(dplyr)
##setwd('~/Documents/info-201/a5-github-report-mackmor13/')
user <- 'mbostock'
#function to get user data
GetUserInfo <- function(user) {
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url)
data.repo <- fromJSON(query.data.repos, tokenCode)
}
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url)
data.repo <- fromJSON(query.data.repos, tokenCode)
##install.packages("devtools")
##devtools::install_github("rstudio/rmarkdown")
library(jsonlite)
library(dplyr)
##setwd('~/Documents/info-201/a5-github-report-mackmor13/')
user <- 'mbostock'
#function to get user data
GetUserInfo <- function(user) {
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url)
data.repo <- fromJSON(query.data.repos, tokenCode)
}
data.repo
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url)
data.repo <- fromJSON(query.data.repos, per.page, tokenCode)
##install.packages("devtools")
##devtools::install_github("rstudio/rmarkdown")
library(jsonlite)
library(dplyr)
##setwd('~/Documents/info-201/a5-github-report-mackmor13/')
user <- 'mbostock'
#function to get user data
GetUserInfo <- function(user) {
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url)
data.repo <- fromJSON(query.data.repos, per.page, tokenCode)
}
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '?page=1&per_page=100'
query.data.repos <- paste0(repo.url)
data.repo <- fromJSON(query.data.repos, per.page, tokenCode)
##install.packages("devtools")
##devtools::install_github("rstudio/rmarkdown")
library(jsonlite)
library(dplyr)
##setwd('~/Documents/info-201/a5-github-report-mackmor13/')
user <- 'mbostock'
#function to get user data
GetUserInfo <- function(user) {
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '?page=1&per_page=100'
query.data.repos <- paste0(repo.url)
data.repo <- fromJSON(query.data.repos, per.page, tokenCode)
}
per.page <- '?page=1&per_page=100'
##install.packages("devtools")
##devtools::install_github("rstudio/rmarkdown")
library(jsonlite)
library(dplyr)
##setwd('~/Documents/info-201/a5-github-report-mackmor13/')
user <- 'mbostock'
#function to get user data
GetUserInfo <- function(user) {
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '?page=1&per_page=100'
query.data.repos <- paste0(repo.url)
data.repo <- fromJSON(query.data.repos, per.page, tokenCode)
}
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '?page=1&per_page=100'
query.data.repos <- paste0(repo.url)
data.repo <- fromJSON(query.data.repos, per.page, tokenCode)
##install.packages("devtools")
##devtools::install_github("rstudio/rmarkdown")
library(jsonlite)
library(dplyr)
##setwd('~/Documents/info-201/a5-github-report-mackmor13/')
user <- 'mbostock'
#function to get user data
GetUserInfo <- function(user) {
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url)
data.repo <- fromJSON(query.data.repos, per.page, tokenCode)
}
data.repo.frame <- flatten(data.repo)
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url)
data.repoa <- fromJSON(query.data.repos, per.page, tokenCode)
##install.packages("devtools")
##devtools::install_github("rstudio/rmarkdown")
library(jsonlite)
library(dplyr)
##setwd('~/Documents/info-201/a5-github-report-mackmor13/')
user <- 'mbostock'
#function to get user data
GetUserInfo <- function(user) {
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url)
data.repo <- fromJSON(query.data.repos, per.page, tokenCode)
}
data.repo.frame <- flatten(data.repo)
##install.packages("devtools")
##devtools::install_github("rstudio/rmarkdown")
library(jsonlite)
library(dplyr)
##setwd('~/Documents/info-201/a5-github-report-mackmor13/')
user <- 'mbostock'
#function to get user data
GetUserInfo <- function(user) {
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url)
data.repo <- fromJSON(query.data.repos, per.page, tokenCode)
}
data.repo.frame <- flatten(data.repo$owner)
data.repo.frame <- flatten(data.repo$owner)
##install.packages("devtools")
##devtools::install_github("rstudio/rmarkdown")
library(jsonlite)
library(dplyr)
##setwd('~/Documents/info-201/a5-github-report-mackmor13/')
user <- 'mbostock'
#function to get user data
GetUserInfo <- function(user) {
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url)
data.repo <- fromJSON(query.data.repos, per.page, tokenCode)
data.repo.frame <- flatten(data.repo$owner)
}
data.repo.frame <- flatten(data.repo$owner)
data.repo.frame <- flatten(data.repo$owner$repos_url)
data.repo.frame <- flatten(data.$owner$repos_url)
data.repo.frame <- flatten(data.repo$forks_count)
View(data)
---
title: "Untitled"
output: html_document
---
```{r setup, include=FALSE}
### Exercise 5 ###
library(jsonlite)
library(dplyr)
# Write a function that allows you to specify a movie, then does the following:
GetReview <- function(movie) {
# Replace all of the spaces in your movie title with plus signs (+)
movie.no.spaces <- gsub(' ', '+', movie)
# Construct a search query using YOUR api key
# The base URL is https://api.nytimes.com/svc/movies/v2/reviews/search.json?
# See the interactive console for more detail:https://developer.nytimes.com/movie_reviews_v2.json#/Console/GET/reviews/search.json
base.url <- 'https://api.nytimes.com/svc/movies/v2/reviews/search.json?'
api.key <- "&api-key=2d3963db35bb4d0f88f17a193b8c62e8"
request <- paste0(base.url, 'query=', movie.no.spaces, api.key)
# Request data using your search query
results <- fromJSON(request)
# What type of variable does this return?
# Flatten the data stored in the `$results` key of the data returned to you
flattened <- flatten(results$results)
# From the most recent review, store the headline, short summary, and link to full article each in their own variables
first.review <- flattened[1,]
headline <- first.review$headline
summary <- first.review$summary_short
link <- first.review$link.url
# Return an list of the three pieces of information from above
info <- list(headline=headline, summary=summary, link=link)
return(info)
}
# Test that your function works with a movie of your choice
AlmostFamousInfo <- GetReview('Almost Famous')
Contact GitHub API Training Shop Blog About
© 2016 GitHub, Inc. Terms Privacy Security Status Help
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
---
title: "Untitled"
output: html_document
---
```{r setup, include=FALSE}
### Exercise 5 ###
library(jsonlite)
library(dplyr)
# Write a function that allows you to specify a movie, then does the following:
GetReview <- function(movie) {
# Replace all of the spaces in your movie title with plus signs (+)
movie.no.spaces <- gsub(' ', '+', movie)
# Construct a search query using YOUR api key
# The base URL is https://api.nytimes.com/svc/movies/v2/reviews/search.json?
# See the interactive console for more detail:https://developer.nytimes.com/movie_reviews_v2.json#/Console/GET/reviews/search.json
base.url <- 'https://api.nytimes.com/svc/movies/v2/reviews/search.json?'
api.key <- "&api-key=2d3963db35bb4d0f88f17a193b8c62e8"
request <- paste0(base.url, 'query=', movie.no.spaces, api.key)
# Request data using your search query
results <- fromJSON(request)
# What type of variable does this return?
# Flatten the data stored in the `$results` key of the data returned to you
flattened <- flatten(results$results)
# From the most recent review, store the headline, short summary, and link to full article each in their own variables
first.review <- flattened[1,]
headline <- first.review$headline
summary <- first.review$summary_short
link <- first.review$link.url
# Return an list of the three pieces of information from above
info <- list(headline=headline, summary=summary, link=link)
return(info)
}
# Test that your function works with a movie of your choice
AlmostFamousInfo <- GetReview('Almost Famous')
Contact GitHub API Training Shop Blog About
© 2016 GitHub, Inc. Terms Privacy Security Status Help
```
---
title: "Untitled"
output: html_document
---
```{r setup, include=FALSE}
### Exercise 5 ###
library(jsonlite)
library(dplyr)
# Write a function that allows you to specify a movie, then does the following:
GetReview <- function(movie) {
# Replace all of the spaces in your movie title with plus signs (+)
movie.no.spaces <- gsub(' ', '+', movie)
# Construct a search query using YOUR api key
# The base URL is https://api.nytimes.com/svc/movies/v2/reviews/search.json?
# See the interactive console for more detail:https://developer.nytimes.com/movie_reviews_v2.json#/Console/GET/reviews/search.json
base.url <- 'https://api.nytimes.com/svc/movies/v2/reviews/search.json?'
api.key <- "&api-key=2d3963db35bb4d0f88f17a193b8c62e8"
request <- paste0(base.url, 'query=', movie.no.spaces, api.key)
# Request data using your search query
results <- fromJSON(request)
# What type of variable does this return?
# Flatten the data stored in the `$results` key of the data returned to you
flattened <- flatten(results$results)
# From the most recent review, store the headline, short summary, and link to full article each in their own variables
first.review <- flattened[1,]
headline <- first.review$headline
summary <- first.review$summary_short
link <- first.review$link.url
# Return an list of the three pieces of information from above
info <- list(headline=headline, summary=summary, link=link)
return(info)
}
# Test that your function works with a movie of your choice
AlmostFamousInfo <- GetReview('Almost Famous')
```
data.repo.frame <- flatten(data.repo$data.repo)
##install.packages("devtools")
##devtools::install_github("rstudio/rmarkdown")
library(jsonlite)
library(dplyr)
##setwd('~/Documents/info-201/a5-github-report-mackmor13/')
user <- 'mbostock'
#function to get user data
GetUserInfo <- function(user) {
base <- 'https://api.github.com/users/'
query.url <- paste0(base, user)
data <- fromJSON(query.url)
repo.url <- data$repos_url
tokenCode <- '&access_token=d2cc0bc44e550d826daeed75dd77f7770ec1314a'
per.page <- '&per_page=100'
query.data.repos <- paste0(repo.url)
data.repo <- fromJSON(query.data.repos, per.page, tokenCode)
data.repo.frame <- flatten(data.repo$data.repo)
num_repo <- data
most_popular <-
}
num_repo <- data$public_repos[1]
num_repo
---
title: "USA Shooting"
output: html_document
---
```{r}
setwd('~/info-201/a6-mapping-shootings-mackmor13/')
Shootings <- read.csv(./data/Mass-Shooting-Data.csv)
```
## R Markdown
The shooings in the USA have...
setwd('~/info-201/a6-mapping-shootings-mackmor13/')
Shootings <- read.csv(./data/Mass-Shooting-Data.csv)
##setwd('~/info-201/a6-mapping-shootings-mackmor13/')
runApp('Info_201/a8-building-apps-mackmor13')
### Exercise 2 ###
=======
# Final Project Team 4
>>>>>>> 9ab8315ed151f52bf2e247bcc2e2b6bdbad1a67d
library(shiny)
library(dplyr)
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
source('./scripts/choro_map_creation_function.R')
source('./scripts/choro_map_data_function.R')
source('./scripts/scatter1_creation_function.R')
source('./scripts/scatter1_data_function.R')
source('./scripts/bar_creation_function.R')
source('./scripts/bar_data_function.R')
df <- read.csv("./data/ilodata.csv", stringsAsFactors = FALSE)
shinyServer(function(input, output) {
# Render a plotly object that returns your scatter on the UI's radio button and select indicator
output$GlobalMap <- renderPlotly({
return(
WorldMap(
FilterMapData(df,
input$radio2,
input$radio1,
input$slider2[1],
input$slider2[2],
input$select
)
)
)
})
output$ComboUnemployment <- renderPlotly({
return(
UrbanRuralScatter(
UnemployedScatter(df,
input$slider2[1],
input$slider2[2],
input$radio1,
input$select
)
)
)
})
<<<<<<< HEAD
runApp('Info_201/a8-building-apps-mackmor13')
runApp('Info_201/a8-building-apps-mackmor13')
install.packages("shiny")
install.packages("shiny")
data <- read.csv("../data/ilodata.csv")
install.packages('dplyr')
setwd("~/Info_201/finalproject/scripts")
# Final Project Team 4
=======
=======
output$Bar1 <- renderPlotly({
return(
UnemploymentBar(
BarData(df,
input$select2,
input$radio3
)
>>>>>>> 9ab8315ed151f52bf2e247bcc2e2b6bdbad1a67d
)
)
})
})
source('./scripts/choro_map_creation_function.R')
getwd()
setwd("C:\Users\gebiz\Desktop\finalproject\scripts")
setwd("C:/Users/gebiz/Desktop/finalproject/scripts")
getwd()
# Final Project Team 4
library(shiny)
library(dplyr)
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
source('./scripts/choro_map_creation_function.R')
source('./scripts/choro_map_data_function.R')
source('./scripts/scatter1_creation_function.R')
source('./scripts/scatter1_data_function.R')
source('./scripts/bar_creation_function.R')
source('./scripts/bar_data_function.R')
df <- read.csv("./data/ilodata.csv", stringsAsFactors = FALSE)
shinyServer(function(input, output) {
# Render a plotly object that returns your scatter on the UI's radio button and select indicator
output$GlobalMap <- renderPlotly({
return(
WorldMap(
FilterMapData(df,
input$radio2,
input$radio1,
input$slider2[1],
input$slider2[2],
input$select
)
)
)
})
output$ComboUnemployment <- renderPlotly({
return(
UrbanRuralScatter(
UnemployedScatter(df,
input$slider2[1],
input$slider2[2],
input$radio1,
input$select
)
)
)
})
output$Bar1 <- renderPlotly({
return(
UnemploymentBar(
BarData(df,
input$select2,
input$radio3
)
)
)
})
})
source('./scripts/choro_map_creation_function.R')
setwd("C:/Users/gebiz/Desktop/finalproject")
source('./scripts/choro_map_data_function.R')
source('./scripts/choro_map_creation_function.R')
# Final Project Team 4
library(shiny)
library(dplyr)
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
source('./scripts/choro_map_creation_function.R')
source('./scripts/choro_map_data_function.R')
source('./scripts/scatter1_creation_function.R')
source('./scripts/scatter1_data_function.R')
source('./scripts/bar_creation_function.R')
source('./scripts/bar_data_function.R')
df <- read.csv("./data/ilodata.csv", stringsAsFactors = FALSE)
shinyServer(function(input, output) {
# Render a plotly object that returns your scatter on the UI's radio button and select indicator
output$GlobalMap <- renderPlotly({
return(
WorldMap(
FilterMapData(df,
input$radio2,
input$radio1,
input$slider2[1],
input$slider2[2],
input$select
)
)
)
})
output$ComboUnemployment <- renderPlotly({
return(
UrbanRuralScatter(
UnemployedScatter(df,
input$slider2[1],
input$slider2[2],
input$radio1,
input$select
)
)
)
})
output$Bar1 <- renderPlotly({
return(
UnemploymentBar(
BarData(df,
input$select2,
input$radio3
)
)
)
})
})
runApp()
runApp()
runApp()
View(UnemploymentBar)
library(shiny)
library(plotly)
df <- read.csv("./data/ilodata.csv", stringsAsFactors = FALSE)
only.countries <- select(df, Country_Label) %>% unique()
only.ages <- select(df, Classif1_Item_Label) %>% unique()
shinyUI(fluidPage(
tabsetPanel(
tabPanel("International Labor Organization - Visualized",
sidebarLayout(
sidebarPanel(
radioButtons("radio1","Gender",
choices = list("Female",
"Male",
"Total"),
selected = "Total"),
radioButtons("radio2", "Area",
choices = list("Rural",
"Urban",
"National"),
selected = "National"),
sliderInput("slider2", "Slider Range",
min = min(df$Time),
max = max(df$Time),
value = c(1995, 1996),
round = TRUE,
step = 1,
animate = TRUE
),
selectInput("select",
label = h3("Select an Age Range"),
choices = only.ages,
selected = only.ages[1])
),
mainPanel(
plotlyOutput("GlobalMap"),
plotlyOutput("ComboUnemployment")
)
)
),
tabPanel("International Labor Scatterplot",
sidebarLayout(
sidebarPanel(
selectInput("select2",
label = h3("Select a Country"),
choices = only.countries,
selected = only.countries[1]),
radioButtons("radio3", "Area",
choices = list("Rural",
"Urban",
"National"),
selected = "National")
),
mainPanel(
plotlyOutput("Bar1")
)
)
)
)
)
)
runApp()
library(plotly)
library(dplyr)
UnemploymentBar <- function(df) {
gender.hist <- plot_ly(df,
x = ~Time,
y = ~male.mean,
type = "bar",
name = "Male Unemployment Percentage",
color = "Blue") %>%
add_trace(
y = ~female.mean,
name = "Female Unemployment Percentage",
color = "Pink") %>%
add_trace(
y = ~total.mean,
name = "Total Unemployment Percentage",
color = "Orange") %>%
layout(yaxis = list(title = "Percentage Unemployedst"),
xaxis = list(title = "Year"),
barmode = "group")
return(gender.hist)
}
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("./data/ilodata.csv")
# load packages
library(dplyr)
# filter down our data, excluding rows where there is no observed value
data <- filter(data, !is.na(Obs_Value))
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
only.countries <- select(data, Country_Label) %>% unique()
only.ages <- select(data, Classif1_Item_Label) %>% unique()
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, start.year, end.year, age) {
mapping.data <- short.data %>% subset(Classif2_Item_Label %in% urbvar) %>%
subset(Sex_Item_Label %in% gender) %>%
group_by(Country_Code) %>%
filter(age == Clasif1_Item_Label) %>%
filter(Time > start.year - 1) %>%
filter(Time < end.year + 1) %>%
summarise(occurrences = n(),
mean.observations = mean(Obs_Value))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
mapping.data <- mutate(mapping.data, hover = with(mapping.data,
paste("Country:", Country_Code, '<br>',
"Percentage Unemployed:", mean.observations, '<br>',
"Total Years and Genders:", occurrences, '<br',
"Age Range:", Classif1_Item_Label)
)
)
return (mapping.data)
}
#mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
hello <- FilterMapData("Urban", "Male", 2000, 2001, "Total")
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("./data/ilodata.csv")
# load packages
library(dplyr)
# filter down our data, excluding rows where there is no observed value
data <- filter(data, !is.na(Obs_Value))
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
only.countries <- select(data, Country_Label) %>% unique()
only.ages <- select(data, Classif1_Item_Label) %>% unique()
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, start.year, end.year, age) {
mapping.data <- short.data %>% subset(Classif2_Item_Label %in% urbvar) %>%
subset(Sex_Item_Label %in% gender) %>%
group_by(Country_Code) %>%
filter(age == Claasif1_Item_Label) %>%
filter(Time > start.year - 1) %>%
filter(Time < end.year + 1) %>%
summarise(occurrences = n(),
mean.observations = mean(Obs_Value))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
mapping.data <- mutate(mapping.data, hover = with(mapping.data,
paste("Country:", Country_Code, '<br>',
"Percentage Unemployed:", mean.observations, '<br>',
"Total Years and Genders:", occurrences, '<br',
"Age Range:", Classif1_Item_Label)
)
)
return (mapping.data)
}
#mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
hello <- FilterMapData("Urban", "Male", 2000, 2001, "Total")
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("./data/ilodata.csv")
# load packages
library(dplyr)
# filter down our data, excluding rows where there is no observed value
data <- filter(data, !is.na(Obs_Value))
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
only.countries <- select(data, Country_Label) %>% unique()
only.ages <- select(data, Classif1_Item_Label) %>% unique()
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, start.year, end.year, age) {
mapping.data <- short.data %>% subset(Classif2_Item_Label %in% urbvar) %>%
subset(Sex_Item_Label %in% gender) %>%
group_by(Country_Code) %>%
filter(age == Classif1_Item_Label) %>%
filter(Time > start.year - 1) %>%
filter(Time < end.year + 1) %>%
summarise(occurrences = n(),
mean.observations = mean(Obs_Value))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
mapping.data <- mutate(mapping.data, hover = with(mapping.data,
paste("Country:", Country_Code, '<br>',
"Percentage Unemployed:", mean.observations, '<br>',
"Total Years and Genders:", occurrences, '<br',
"Age Range:", Classif1_Item_Label)
)
)
return (mapping.data)
}
#mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
hello <- FilterMapData("Urban", "Male", 2000, 2001, "Total")
View(short.data)
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("./data/ilodata.csv")
# load packages
library(dplyr)
# filter down our data, excluding rows where there is no observed value
data <- filter(data, !is.na(Obs_Value))
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
only.countries <- select(data, Country_Label) %>% unique()
only.ages <- select(data, Classif1_Item_Label) %>% unique()
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, start.year, end.year, age) {
mapping.data <- short.data %>% subset(Classif2_Item_Label %in% urbvar) %>%
subset(Sex_Item_Label %in% gender) %>%
group_by(Country_Code) %>%
filter(age == short.data$Classif1_Item_Label) %>%
filter(Time > start.year - 1) %>%
filter(Time < end.year + 1) %>%
summarise(occurrences = n(),
mean.observations = mean(Obs_Value))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
mapping.data <- mutate(mapping.data, hover = with(mapping.data,
paste("Country:", Country_Code, '<br>',
"Percentage Unemployed:", mean.observations, '<br>',
"Total Years and Genders:", occurrences, '<br',
"Age Range:", Classif1_Item_Label)
)
)
return (mapping.data)
}
#mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
View(short.data)
hello <- FilterMapData("Urban", "Male", 2000, 2001, "Total")
>>>>>>> d247073251e885f01c8e4311c6e321875a621730
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("./data/ilodata.csv")
<<<<<<< HEAD
shinyServer(function(input, output) {
# Render a plotly object that returns your scatter on the UI's radio button and select indicator
output$scatter <- renderPlotly({
return(WorldMap(a,b,c))
})
})
gwd
setwd("~/Info_201/finalproject")
getwd()
=======
# load packages
library(dplyr)
# filter down our data, excluding rows where there is no observed value
data <- filter(data, !is.na(Obs_Value))
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
only.countries <- select(data, Country_Label) %>% unique()
only.ages <- select(data, Classif1_Item_Label) %>% unique()
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, start.year, end.year, age) {
mapping.data <- short.data %>% subset(Classif2_Item_Label %in% urbvar) %>%
subset(Sex_Item_Label %in% gender) %>%
group_by(Country_Code) %>%
filter(age == short.data$Classif1_Item_Label) %>%
filter(Time > start.year - 1) %>%
filter(Time < end.year + 1) %>%
mapping.data <- mapping.data[!duplicated(mapping.data), ]
mapping.data <- mutate(mapping.data, hover = with(mapping.data,
paste("Country:", Country_Code, '<br>',
"Percentage Unemployed:", Obs_Value, '<br>',
"Age Range:", Classif1_Item_Label)
)
)
return (mapping.data)
}
#mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
hello <- FilterMapData("Urban", "Male", 2000, 2001, "Total")
>>>>>>> d247073251e885f01c8e4311c6e321875a621730
=======
>>>>>>> 9ab8315ed151f52bf2e247bcc2e2b6bdbad1a67d
