WorldMap()
View(data)
View(mapping.data)
# creates heat map of unemployment data around the world
# load libraries for use of functions
library(plotly)
library(dplyr)
# source data from data folder
ilo.data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# source script from Nathan's to retrieve refined data table
source('~/Documents/GitHub/finalproject/datafunctions.R')
# create a more concise data table to use info for map
mapping.data$hover <- with(mapping.data, paste("Country:", Country_Label, '<br>',
"Year:", Time, '<br>',
"Percentage Unemployed:", Obs_Value))
# shows interactive map
WorldMap <- function() {
#single.country.row <- filter(mapping.data, Country_Label == country.name)
newly.created.map <- mapping.data %>%
plot_ly(type = 'choropleth',
locations = ~Country_Code,
locationmode = "world",
z = ~Obs_Value) %>%
colorbar(title = "Percentage of Workforce Unemployed") %>%
layout(
title = "Unemployment Rates Around the World",
geo = list(scope = "world")
)
return(newly.created.map)
}
WorldMap()
# creates heat map of unemployment data around the world
# load libraries for use of functions
library(plotly)
library(dplyr)
# source data from data folder
ilo.data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# source script from Nathan's to retrieve refined data table
source('~/Documents/GitHub/finalproject/datafunctions.R')
# create a more concise data table to use info for map
mapping.data$hover <- with(mapping.data, paste("Country:", Country_Label, '<br>',
"Year:", Time, '<br>',
"Percentage Unemployed:", Obs_Value))
# shows interactive map
WorldMap <- function() {
#single.country.row <- filter(mapping.data, Country_Label == country.name)
newly.created.map <- mapping.data %>%
plot_ly(type = 'choropleth',
locations = ~Country_Code,
locationmode = "world",
colors = "reds",
z = ~Obs_Value) %>%
colorbar(title = "Percentage of Workforce Unemployed") %>%
layout(
title = "Unemployment Rates Around the World",
geo = list(scope = "world")
)
return(newly.created.map)
}
WorldMap()
# creates heat map of unemployment data around the world
# load libraries for use of functions
library(plotly)
library(dplyr)
# source data from data folder
ilo.data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# source script from Nathan's to retrieve refined data table
source('~/Documents/GitHub/finalproject/datafunctions.R')
# create a more concise data table to use info for map
mapping.data$hover <- with(mapping.data, paste("Country:", Country_Label, '<br>',
"Year:", Time, '<br>',
"Percentage Unemployed:", Obs_Value))
# shows interactive map
WorldMap <- function() {
#single.country.row <- filter(mapping.data, Country_Label == country.name)
newly.created.map <- mapping.data %>%
plot_ly(type = 'choropleth',
locations = ~Country_Code,
locationmode = "world",
colors = "Reds",
z = ~Obs_Value) %>%
colorbar(title = "Percentage of Workforce Unemployed") %>%
layout(
title = "Unemployment Rates Around the World",
geo = list(scope = "world")
)
return(newly.created.map)
}
WorldMap()
# creates heat map of unemployment data around the world
# load libraries for use of functions
library(plotly)
library(dplyr)
# source data from data folder
ilo.data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# source script from Nathan's to retrieve refined data table
source('~/Documents/GitHub/finalproject/datafunctions.R')
# create a more concise data table to use info for map
mapping.data$hover <- with(mapping.data, paste("Country:", Country_Label, '<br>',
"Year:", Time, '<br>',
"Percentage Unemployed:", Obs_Value))
# shows interactive map
WorldMap <- function() {
#single.country.row <- filter(mapping.data, Country_Label == country.name)
newly.created.map <- mapping.data %>%
plot_ly(type = 'choropleth',
locations = ~Country_Code,
locationmode = "world",
colorpalette = "Reds",
z = ~Obs_Value) %>%
colorbar(title = "Percentage of Workforce Unemployed") %>%
layout(
title = "Unemployment Rates Around the World",
geo = list(scope = "world")
)
return(newly.created.map)
}
WorldMap()
# creates heat map of unemployment data around the world
# load libraries for use of functions
library(plotly)
library(dplyr)
# source data from data folder
ilo.data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# source script from Nathan's to retrieve refined data table
source('~/Documents/GitHub/finalproject/datafunctions.R')
# create a more concise data table to use info for map
mapping.data$hover <- with(mapping.data, paste("Country:", Country_Label, '<br>',
"Year:", Time, '<br>',
"Percentage Unemployed:", Obs_Value))
# shows interactive map
WorldMap <- function() {
#single.country.row <- filter(mapping.data, Country_Label == country.name)
newly.created.map <- mapping.data %>%
plot_ly(type = 'choropleth',
locations = ~Country_Code,
locationmode = "world",
colorpalette = "Picnic",
z = ~Obs_Value) %>%
colorbar(title = "Percentage of Workforce Unemployed") %>%
layout(
title = "Unemployment Rates Around the World",
geo = list(scope = "world")
)
return(newly.created.map)
}
WorldMap()
# creates heat map of unemployment data around the world
# load libraries for use of functions
library(plotly)
library(dplyr)
# source data from data folder
ilo.data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# source script from Nathan's to retrieve refined data table
source('~/Documents/GitHub/finalproject/datafunctions.R')
# create a more concise data table to use info for map
mapping.data$hover <- with(mapping.data, paste("Country:", Country_Label, '<br>',
"Year:", Time, '<br>',
"Percentage Unemployed:", Obs_Value))
# shows interactive map
WorldMap <- function() {
#single.country.row <- filter(mapping.data, Country_Label == country.name)
newly.created.map <- mapping.data %>%
plot_ly(type = 'choropleth',
locations = ~Country_Code,
locationmode = "world",
colors = "Reds",
z = ~Obs_Value) %>%
colorbar(title = "Percentage of Workforce Unemployed") %>%
layout(
title = "Unemployment Rates Around the World",
geo = list(scope = "world")
)
return(newly.created.map)
}
WorldMap()
# creates heat map of unemployment data around the world
# load libraries for use of functions
library(plotly)
library(dplyr)
# source data from data folder
ilo.data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# source script from Nathan's to retrieve refined data table
source('~/Documents/GitHub/finalproject/datafunctions.R')
# create a more concise data table to use info for map
mapping.data$hover <- with(mapping.data, paste("Country:", Country_Label, '<br>',
"Year:", Time, '<br>',
"Percentage Unemployed:", Obs_Value))
# shows interactive map
WorldMap <- function() {
#single.country.row <- filter(mapping.data, Country_Label == country.name)
newly.created.map <- mapping.data %>%
plot_ly(type = 'choropleth',
locations = ~Country_Code,
locationmode = "world",
colorscale = "Purples",
z = ~Obs_Value) %>%
colorbar(title = "Percentage of Workforce Unemployed") %>%
layout(
title = "Unemployment Rates Around the World",
geo = list(scope = "world")
)
return(newly.created.map)
}
WorldMap()
# creates heat map of unemployment data around the world
# load libraries for use of functions
library(plotly)
library(dplyr)
# source data from data folder
ilo.data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# source script from Nathan's to retrieve refined data table
source('~/Documents/GitHub/finalproject/datafunctions.R')
# create a more concise data table to use info for map
mapping.data$hover <- with(mapping.data, paste("Country:", Country_Label, '<br>',
"Year:", Time, '<br>',
"Percentage Unemployed:", Obs_Value))
# shows interactive map
WorldMap <- function() {
#single.country.row <- filter(mapping.data, Country_Label == country.name)
newly.created.map <- mapping.data %>%
plot_ly(type = 'choropleth',
locations = ~Country_Code,
locationmode = "world",
colorscale = "Purples",
z = ~Obs_Value) %>%
colorbar(title = "Percentage of Workforce Unemployed") %>%
layout(
title = "Unemployment Rates Around the World",
geo = list(scope = "world")
)
return(newly.created.map)
}
WorldMap()
# creates heat map of unemployment data around the world
# load libraries for use of functions
library(plotly)
library(dplyr)
# source data from data folder
ilo.data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# source script from Nathan's to retrieve refined data table
source('~/Documents/GitHub/finalproject/datafunctions.R')
# create a more concise data table to use info for map
mapping.data$hover <- with(mapping.data, paste("Country:", Country_Label, '<br>',
"Year:", Time, '<br>',
"Percentage Unemployed:", Obs_Value))
# shows interactive map
WorldMap <- function() {
#single.country.row <- filter(mapping.data, Country_Label == country.name)
newly.created.map <- mapping.data %>%
plot_ly(type = 'choropleth',
locations = ~Country_Code,
locationmode = "world",
colors = "Purples",
z = ~Obs_Value) %>%
colorbar(title = "Percentage of Workforce Unemployed") %>%
layout(
title = "Unemployment Rates Around the World",
geo = list(scope = "world")
)
return(newly.created.map)
}
WorldMap()
View(short.data)
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(short.data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
return (mapping.data)
}
mapping.data <- FilterMapData("National", "Total", "Total")
View(mapping.data)
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(short.data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
return (mapping.data)
}
mapping.data <- FilterMapData("National", "Total", "Total")
View(mapping.data)
colnames(mapping.data)
colnames(data)
data <- filter(data, Obs_Value != NULL) %>%
filter(Flag_Code != c("B", "U")
data <- filter(data, Obs_Value != NULL) %>%
filter(Flag_Code != c("B", "U")
data <- filter(data, Obs_Value != NULL) %>%
filter(Flag_Code != c("B", "U"))
data <- filter(data, !is.na(Obs_Value)) %>%
filter(Flag_Code == !c("B", "U"))
data <- filter(data, !is.na(Obs_Value)) %>%
filter(Flag_Code == c("B", "U"))
data <- filter(data, !is.na(Obs_Value))
View(data)
data <- filter(data, !is.na(Obs_Value)) %>%
filter(Flag_Code = "U")
data <- filter(data, !is.na(Obs_Value)) %>%
filter(Flag_Code == "U")
View(data)
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# load packages
library(dplyr)
is.NA(variable/value)
data <- filter(data, !is.na(Obs_Value)) %>%
filter(Flag_Code == "U")
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
return (mapping.data)
}
mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
View(mapping.data)
View(data)
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# load packages
library(dplyr)
is.NA(variable/value)
data <- filter(data, !is.na(Obs_Value)) %>%
filter(Flag_Code == "U")
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(short.data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
return (mapping.data)
}
mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
View(mapping.data)
View(mapping.data)
View(data)
mapping.data <- FilterMapData("National", "Total", "Total")
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
View(short.data)
data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
View(data)
data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# load packages
data <- read.csv("/Users/nathanbombardier/Documents/School/Fall2016/INFO201/finalproject/data/ilodata.csv")
data <- read.csv("/Users/nathanbombardier/Documents/School/Fall2016/INFO201/finalproject/data/ilodata.csv")
View(data)
data <- filter(data, !is.na(Obs_Value)) %>%
filter(Flag_Code == "U")
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(short.data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
return (mapping.data)
}
View(data)
View(short.data)
FilterMapData("National", "Total", "Total")
View(data)
View(short.data)
View(data)
View(short.data)
data <- read.csv("/Users/nathanbombardier/Documents/School/Fall2016/INFO201/finalproject/data/ilodata.csv")
data <- read.csv("/Users/nathanbombardier/Documents/School/Fall2016/INFO201/finalproject/data/ilodata.csv")
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
return (mapping.data)
}
mapping.data <- FilterMapData("National", "Total", "Total")
View(mapping.data)
data <- filter(data, !is.na(Obs_Value)) %>%
filter(Flag_Code == "U")
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
data <- read.csv("/Users/nathanbombardier/Documents/School/Fall2016/INFO201/finalproject/data/ilodata.csv")
View(data)
View(short.data)
data <- filter(data, !is.na(Obs_Value))
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
return (mapping.data)
}
mapping.data <- FilterMapData("National", "Total", "Total")
View(mapping.data)
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(short.data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
return (mapping.data)
}
mapping.data <- FilterMapData("National", "Total", "Total")
View(mapping.data)
only.countries <- select(data, Country_Label) %>%
unique()
View(only.countries)
View(only.countries)
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# load packages
library(dplyr)
# filter down our data, excluding rows where there is no observed value
data <- filter(data, !is.na(Obs_Value))
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
only.countries <- select(data, Country_Label) %>%
unique()
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(short.data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
return (mapping.data)
}
#mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
data <- read.csv("~/Documents/GitHub/finalproject/data/ilodata.csv")
# load packages
library(dplyr)
# filter down our data, excluding rows where there is no observed value
data <- filter(data, !is.na(Obs_Value))
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
only.countries <- select(data, Country_Label) %>%
unique()
# filter down results to both sexes, urban and rural, all ages, and latest year data was collected
FilterMapData <- function(urbvar, gender, age) {
mapping.data <- filter(short.data, Classif2_Item_Label == urbvar) %>%
filter(Sex_Item_Label == gender) %>%
filter(Classif1_Item_Label == age) %>%
group_by(Country_Label) %>%
filter(Time == max(Time))
mapping.data <- mapping.data[!duplicated(mapping.data), ]
return (mapping.data)
}
#mapping.data <- FilterMapData("National", "Total", "Total")
# for some reason there are duplicates, this deals with that
shiny::runApp('Documents/School/Fall2016/INFO201/m14-shiny/demo-3')
shiny::runApp('Documents/School/Fall2016/INFO201/a8-building-apps-eyeneye')
data <- read.csv("./data/ilodata.csv")
data <- read.csv("./data/ilodata.csv")
# load packages
library(dplyr)
# filter down our data, excluding rows where there is no observed value
data <- filter(data, !is.na(Obs_Value))
# pare down columns in dataframe to just country, sex, age, urban status, year, and unemployment
short.data <- select(data, Country_Label, Country_Code, Sex_Item_Label,
Classif1_Item_Label, Classif2_Item_Label, Time, Obs_Value)
only.countries <- select(data, Country_Label) %>%
unique()
library(dplyr)
data <- filter(data, !is.na(Obs_Value))
data <- read.csv("./data/ilodata.csv")
data <- read.csv("./data/ilodata.csv")
data <- read.csv("./data/ilodata.csv")
getwd()
setwd("~/Documents/School/Fall2016/INFO201/finalproject")
data <- read.csv("./data/ilodata.csv")
source('~/Documents/School/Fall2016/INFO201/finalproject/datafunctions.R', echo=TRUE)
View(short.data)
View(short.data)
