label = h3("Select a Country"),
choices = only.countries,
selected = only.countries[1])
),
mainPanel(
plotlyOutput("PieChart")
)
)
)
)
)
)
shinyUI(fluidPage(
tabsetPanel(
tabPanel("International Labor Organization - Visualized",
sidebarLayout(
sidebarPanel(
radioButtons("radio1","Gender",
choices = list("Female",
"Male",
"Total"),
selected = "Total"),
radioButtons("radio2", "Area",
choices = list("Rural",
"Urban",
"National"),
selected = "National"),
sliderInput("slider2", "Slider Range",
min = min(df$Time),
max = max(df$Time),
value = c(1995, 1996),
round = TRUE,
step = 1,
animate = TRUE
),
selectInput("select",
label = h3("Select an Age Range"),
choices = only.ages,
selected = only.ages[1])
),
mainPanel(
plotlyOutput("GlobalMap")
)
)
),
tabPanel("Internation Labor Scatterplot",
sidebarLayout(
sidebarPanel(
selectInput("select2",
label = h3("Select a Country"),
choices = only.countries,
selected = only.countries[1])
),
mainPanel(
plotlyOutput("PieChart")
)
)
)
)
)
)
only.ages <- select(df, Classif1_Item_Label) %>% unique()
only.countries <- select(df, Country_Label) %>% unique()
source('./Scripts/buildScatter.R')
source('./datafunctions.R')
source('./scripts/datafunctions.R')
source('./scripts/datafunctions.R')
source('/scripts/datafunctions.R')
source('./scripts/datafunctions.R')
source('~/scripts/datafunctions.R')
source('./scripts/datafunctions.R')
source('./scripts/datafunctions.R')
source('./datafunctions.R')
source('./datafunctions.R')
source('./scripts/buildScatter.R')
source('./scripts/datafunctions.R')
source('./scripts/buildScatter.R')
runApp()
library(shiny)
library(dplyr)
source('./scripts/map1.r')
source('./scripts/datafunctions.R')
df <- read.csv("./data/ilodata.csv", stringsAsFactors = FALSE)
runApp()
library(shiny)
library(dplyr)
# data from International Labor Organization on unemployment from 1990 to 2015,
# broken down by country, gender, age group, urban/rural, year
# NOTE: Can't figure out how to make a general and shortened file path for some reason...
library(rsconnect)
source('./scripts/map1.r')
source('./scripts/datafunctions.R')
source('./scripts/scatterunemployment.R')
source('./scripts/scatterdata.R')
source('./scripts/piefunction.R')
source('./scripts/piechartunemployment.R')
df <- read.csv("./data/ilodata.csv", stringsAsFactors = FALSE)
shinyServer(function(input, output) {
# Render a plotly object that returns your scatter on the UI's radio button and select indicator
output$GlobalMap <- renderPlotly({
return(
WorldMap(
FilterMapData(df,
input$radio2,
input$radio1,
input$slider2[1],
input$slider2[2],
input$select
)
)
)
})
# <<<<<<< HEAD
#   output$BuildScatter <- renderPlot({
#     return(BuildScatter(FilterScatterCountry(input$country), input$xcol, input$ycol))
#   })
#
# =======
output$ComboUnemployment <- renderPlotly({
return(
UrbanRuralScatter(
UnemployedScatter(df,
input$slider2[1],
input$slider2[2],
input$radio1,
input$select
)
)
)
})
output$Bar1 <- renderPlotly({
return(
UnemploymentHist(
PieUnemployment(df,
input$select2,
input$radio3
)
)
)
})
#>>>>>>> f462721ca299d37257af563bf8eda3c37b211b8c
})
runApp()
source('./scripts/map1.r')
source('./scripts/datafunctions.R')
source('./scripts/scatterunemployment.R')
source('./scripts/scatterdata.R')
source('./scripts/piefunction.R')
source('./scripts/piechartunemployment.R')
df <- read.csv("./data/ilodata.csv", stringsAsFactors = FALSE)
runApp()
runApp()
runApp()
source('./scripts/map1.r')
source('./scripts/datafunctions.R')
source('./scripts/scatterunemployment.R')
source('./scripts/scatterdata.R')
source('./scripts/piefunction.R')
source('./scripts/piechartunemployment.R')
library(shiny)
library(plotly)
source('./scripts/datafunctions.R')
source('./scripts/buildScatter.R')
df <- read.csv("./data/ilodata.csv", stringsAsFactors = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
UrbanRuralScatter <- function(df) {
df$hover = with(df, paste("Country:", Country_Label, '<br>',
"Percentage of Urban Unemployment:", urban.mean, '<br>',
"Percentage of Rural Unemployment:", rural.mean, '<br>',
"Combined Unemployment:", urban.mean + rural.mean)
)
return(
plot_ly(df,
x = ~urban.mean,
y = ~rural.mean,
text = ~hover,
type = "scatter",
mode = "markers",
marker = list(size = 10,
color = 'Gold',
line = list(width = 2,
color = 'Purple'))) %>%
layout(title = 'Comparing Urban and Rural Unemployment',
yaxis = list(title = "Rural Unemployment",
zeroline = FALSE),
xaxis = list(title = "Urban Unemployement",
zeroline = FALSE)) %>%
add_trace(x = df$urban.mean, y = df$urban.mean, mode = 'line')
)
}
runApp()
runApp()
UrbanRuralScatter <- function(df) {
df$hover = with(df, paste("Country:", Country_Label, '<br>',
"Percentage of Urban Unemployment:", urban.mean, '<br>',
"Percentage of Rural Unemployment:", rural.mean, '<br>',
"Combined Unemployment:", urban.mean + rural.mean)
)
return(
plot_ly(df,
x = ~urban.mean,
y = ~rural.mean,
text = ~hover,
type = "scatter",
mode = "markers",
fillcolor = "Black",
marker = list(size = 10,
color = 'Red',
line = list(width = 2,
color = 'White'))) %>%
layout(title = 'Comparing Urban and Rural Unemployment',
yaxis = list(title = "Rural Unemployment",
zeroline = FALSE),
xaxis = list(title = "Urban Unemployement",
zeroline = FALSE)) %>%
add_trace(x = c(0, 25), y = c(0, 25), mode = 'line')
)
}
add_trace(x = c(0, 25), y = c(0, 25), mode = 'line')
runApp()
runApp()
runApp()
runApp()
add_trace(
runApp()
runApp()
runApp()
plot_ly(df, x = df$urban.mean, y = df$urban.mean, type = 'scatter', mode = 'lines') %>%
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
((35 - 28.8)^2)/28.8 + ((9-15.2)^2)/15.2 + ((60-66.2)^2)/66.2 + ((41 - 34.8)^2)/34.8
((abs(35 - 28.8)-.5)^2)/28.8 + ((abs(9-15.2)-.5)^2)/15.2 + ((abs(60-66.2)-.5)^2)/66.2 + ((abs(41 - 34.8)-.5)^2)/34.8
8^2/78 + 16.6^2/62.4 + 9.48^2/12.48 + .88^2/4
sum(c((3.29 - 7.49)^2,  (10.26 - 7.49)^2, (8.16 - 7.49)^2), (8.18 - 7.49)^2,(7.56 - 7.49)^2)
26.2428/4
sum(c(4(3.29 - 7.49)^2,  4(10.26 - 7.49)^2, 4(8.16 - 7.49)^2), 4(8.18 - 7.49)^2,4(7.56 - 7.49)^2)
sum(c(4*(3.29 - 7.49)^2,  4*(10.26 - 7.49)^2, 4*(8.16 - 7.49)^2), 4*(8.18 - 7.49)^2,4*(7.56 - 7.49)^2)
10.29-3.29/sqrt(4.012/4)
3.82*sqrt(4.012/4)
mean(c(1,	3	,6,	9,	12,
11,	7,	9	,13,	20,
9,	16,	19,	35,	37,
6,	17,	35,	28,	45,
8,	1	,5,	1	,11,
3,	7,	9,	10,	15,
3	,3,	9	9,	25))
mean(c(1,	3	,6,	9,	12,
11,	7,	9	,13,	20,
9,	16,	19,	35,	37,
6,	17,	35,	28,	45,
8,	1	,5,	1	,11,
3,	7,	9,	10,	15,
3	,3,	9,	9,	25))
gmean <- 13.06
SSa <- 5*sum(c(mean(ml.1 - gmean)^2, mean(ml.2 - gmean)^2))
ml.1 <- c(1,	3	,6,	9,	12,
11,	7,	9	,13,	20,
9,	16,	19,	35,	37,
6,	17,	35,	28,	45)
ml.2 <- c(8,	1	,5,	1	,11,
3,	7,	9,	10,	15,
3	,3,	9,	9,	25)
SSa <- 5*sum(c(mean(ml.1 - gmean)^2, mean(ml.2 - gmean)^2))
SSa <- 30*sum(c(mean(ml.1 - gmean)^2, mean(ml.2 - gmean)^2))
SSa <- (5*30)*sum(c(mean(ml.1 - gmean)^2, mean(ml.2 - gmean)^2))
SSa
SSa <- (5*30)*sum(c(mean(ml.1) - gmean)^2), (mean(ml.2) - gmean)^2)
SSa <- (5*30)*sum(c(mean(ml.1) - gmean)^2), (mean(ml.2) - gmean)^2))
SSa <- (5*30)*sum(c((mean(ml.1) - gmean)^2, (mean(ml.2) - gmean)^2))
SSa <- (5*30)*sum(c((mean(ml.1) - gmean)^2, (mean(ml.2) - gmean)^2))
ml.1 <- c(1,	3	,6,	9,	12,
11,	7,	9	,13,	20,
9,	16,	19,	35,	37,
6,	17,	35,	28,	45)
ml.2 <- c(8,	1	,5,	1	,11,
3,	7,	9,	10,	15,
3	,3,	9,	9,	25)
SSa <- (5*30)*sum(c((mean(ml.1) - gmean)^2, (mean(ml.2) - gmean)^2))
SSa <- (5*30)*sum(c((mean(ml.1) - gmean)^2, (mean(ml.2) - gmean)^2))
SSa
SSa <- (5*30)*(sum(c((mean(ml.1) - gmean)^2, (mean(ml.2) - gmean)^2)))
SSa <- (5*30)*(sum((mean(ml.1) - gmean)^2, (mean(ml.2) - gmean)^2)))
SSa <- (5*30)*(sum((mean(ml.1) - gmean)^2, (mean(ml.2) - gmean)^2))
SSa
ml.1 <- c(11,	7,	9	,13,	20,
ml.1 <- c(11,	7,	9	,13,	20,
ml.1 <- c(11,	7,	9	,13,	20,9,	16,	19,	35,	37,6,	17,	35,	28,	45)
ml.2 <- c(8,	1	,5,	1	,11,3,	7,	9,	10,	15,3	,3,	9,	9,	25)
ml.2 <- c(8,	1	,5,	1	,11, 3,	7,	9,	10,	15, 3	,3,	9,	9,	25)
ml.1 <- c(11,	7,	9	,13,	20,9,	16,	19,	35,	37,6,	17,	35,	28,	45)
SSa <- (5*30)*(sum((mean(ml.1) - gmean)^2, (mean(ml.2) - gmean)^2))
SSa
mean1 <- mean(ml.1)
mean2 <- mean(ml.2)
SSa <- (5*30)*(sum((mean1) - gmean)^2, (mean2) - gmean)^2))
SSa
SSa <- (5*3)*(sum((mean1) - gmean)^2, (mean2) - gmean)^2))
SSa <- (5*3)*(sum((mean1) - gmean)^2, (mean2) - gmean)^2,))
SSa <- (5*3)*(sum((mean1) - gmean)^2 , (mean2) - gmean)^2,))
SSa <- (5*3)*(sum((mean1) - gmean)^2 , (mean2) - gmean)^2))
SSa <- (5*3)*(sum(c(mean1) - gmean)^2,  (mean2) - gmean)^2))
SSa <- (5*3)*(sum(c((mean1) - gmean)^2,  (mean2) - gmean)^2))
SSa <- (5*3)*(sum(c((mean1) - gmean)^2,  (mean2) - gmean)^2)
SSa <- (5*30)*(sum(c((mean1) - gmean)^2,  (mean2) - gmean)^2)
SSa <- (5*30)*(sum(c((mean1) - gmean)^2,  (mean2) - gmean)^2)
SSa
SSa <- (5*3)*(sum(c((mean1) - gmean)^2,  (mean2) - gmean)^2)
SSa
mean(ml.1+ml.2)
gmean <- mean(ml.1+ml.2)
ml.1 <- c(11,	7,	9	,13,	20,9,	16,	19,	35,	37,6,	17,	35,	28,	45)
ml.2 <- c(8,	1	,5,	1	,11, 3,	7,	9,	10,	15, 3	,3,	9,	9,	25)
mean1 <- mean(ml.1)
mean2 <- mean(ml.2)
SSa <- (5*30)*(sum(c((mean1) - gmean)^2,  (mean2) - gmean)^2)
SSa
?matrix
red<- c(9, 11, 10, 9, 15)
green<-c(20,21, 23, 17, 30)
black<-c(6,5,8,14,7)
?plot
barplot(data.frame(red, green, black))
barplot(table(red, green, black))
barplot(red, green, black))
barplot(red, green, black)
data.frame(red, green, black)
barplot(mean(red), mean(black), mean(green))
plot(mean(red), mean(black), mean(green))
plot(mean(red), mean(black), mean(green))
barplot(c((mean(red), mean(black), mean(green))))
barplot(c(mean(red), mean(black), mean(green)))
runApp()
runApp()
source('./scripts/datafunctions.R')
source('./scripts/buildScatter.R')
source('./scripts/datafunctions.R')
source('./scripts/datafunctions.R')
source('./scripts/buildScatter.R')
df <- read.csv("./data/ilodata.csv", stringsAsFactors = FALSE)
only.countries <- select(df, Country_Label) %>% unique()
only.ages <- select(df, Classif1_Item_Label) %>% unique()
shinyUI(fluidPage(
tabsetPanel(
tabPanel("International Labor Organization - Visualized",
sidebarLayout(
sidebarPanel(
radioButtons("radio1","Gender",
choices = list("Female",
"Male",
"Total"),
selected = "Total"),
radioButtons("radio2", "Area",
choices = list("Rural",
"Urban",
"National"),
selected = "National"),
sliderInput("slider2", "Slider Range",
min = min(df$Time),
max = max(df$Time),
value = c(1995, 1996),
round = TRUE,
step = 1,
animate = TRUE
),
selectInput("select",
label = h3("Select an Age Range"),
choices = only.ages,
selected = only.ages[1])
),
mainPanel(
plotlyOutput("GlobalMap"),
plotlyOutput("ComboUnemployment")
)
)
),
tabPanel("International Labor Grouped Bars by Country",
sidebarLayout(
sidebarPanel(
selectInput("select2",
label = h3("Select a Country"),
choices = only.countries,
selected = only.countries[1]),
# <<<<<<< HEAD
#                radioButtons("radio3", "Area",
#                             choices = list("Rural",
#                                            "Urban",
#                                            "National"),
#                             selected = "National")),
#                mainPanel(
#                  plotlyOutput("Bar1")
#                )
#              )
#             )
#     )
# ))
# =======
radioButtons("radio3", "Area",
choices = list("Rural",
"Urban",
"National"),
selected = "National")
),
mainPanel(
plotlyOutput("Bar1")
)
)
)
)
)
)
runApp()
plot_ly(df,
x = ~urban.mean,
y = ~rural.mean,
text = ~hover,
type = "scatter",
mode = "markers",
marker = list(size = 10,
UrbanRuralScatter <- function(df) {
df$hover = with(df, paste("Country:", Country_Label, '<br>',
"Percentage of Urban Unemployment:", urban.mean, '<br>',
"Percentage of Rural Unemployment:", rural.mean, '<br>',
"Combined Unemployment:", urban.mean + rural.mean))
df <- mutate(df, diff = urban.mean - rural.mean)
return(
plot_ly(df,
x = ~urban.mean,
y = ~rural.mean,
text = ~hover,
type = "scatter",
mode = "markers",
marker = list(size = 10,
color = ~diff,
colors = colorRamp(c("red", "white", "blue"))
line = list(width = 2,
color = 'Purple'))) %>%
layout(title = 'Comparing Urban and Rural Unemployment',
yaxis = list(title = "Rural Unemployment",
zeroline = FALSE),
xaxis = list(title = "Urban Unemployement",
zeroline = FALSE))# %>%
#add_trace(x = df$urban.mean, y = df$urban.mean, mode = 'line')
)
}
UrbanRuralScatter <- function(df) {
df$hover = with(df, paste("Country:", Country_Label, '<br>',
"Percentage of Urban Unemployment:", urban.mean, '<br>',
"Percentage of Rural Unemployment:", rural.mean, '<br>',
"Combined Unemployment:", urban.mean + rural.mean))
df <- mutate(df, diff = urban.mean - rural.mean)
return(
plot_ly(df,
x = ~urban.mean,
y = ~rural.mean,
text = ~hover,
type = "scatter",
mode = "markers",
marker = list(size = 10,
color = ~diff,
colors = colorRamp(c("red", "white", "blue"))
line = list(width = 2,
color = 'Purple'))) %>%
layout(title = 'Comparing Urban and Rural Unemployment',
yaxis = list(title = "Rural Unemployment",
zeroline = FALSE),
xaxis = list(title = "Urban Unemployement",
zeroline = FALSE))# %>%
#add_trace(x = df$urban.mean, y = df$urban.mean, mode = 'line')
)
}
UrbanRuralScatter <- function(df) {
df$hover = with(df, paste("Country:", Country_Label, '<br>',
"Percentage of Urban Unemployment:", urban.mean, '<br>',
"Percentage of Rural Unemployment:", rural.mean, '<br>',
"Combined Unemployment:", urban.mean + rural.mean))
df <- mutate(df, diff = urban.mean - rural.mean)
return(
plot_ly(df,
x = ~urban.mean,
y = ~rural.mean,
text = ~hover,
type = "scatter",
mode = "markers",
marker = list(size = 10,
color = ~diff,
colors = colorRamp(c("red", "white", "blue")),
line = list(width = 2,
color = 'Purple'))) %>%
layout(title = 'Comparing Urban and Rural Unemployment',
yaxis = list(title = "Rural Unemployment",
zeroline = FALSE),
xaxis = list(title = "Urban Unemployement",
zeroline = FALSE))# %>%
#add_trace(x = df$urban.mean, y = df$urban.mean, mode = 'line')
)
}
runApp()
source('~/Documents/School/Fall2016/INFO201/finalproject/scripts/scatterunemployent.R', echo=TRUE)
color = ~diff,
runApp()
runApp()
